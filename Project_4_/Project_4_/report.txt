Margaret Capetz
CS 32 Project 5 Report

Tests for RadixTree, Attribute Translator, Member Database classes. 
Tests for Attribute Translator, Member Database also test PersonProfile.
Tested Match Maker class with provided main.cpp file. 

void testRadixTree() {
    //initiate tree
    RadixTree<std::string> tree;

    //insert first word: cash
    tree.insert("cash", "money");
    std::string val;
    val = *(tree.search("cash"));
    assert(val == "money");

    //insert second word: bash
    tree.insert("bash", "sudo");
    val = *(tree.search("bash"));
    assert(val == "sudo");

    val = *(tree.search("cash"));
    assert(val == "money");

    //add third word: cashier
    tree.insert("cashier", "job");
    val = *(tree.search("cashier"));
    assert(val == "job");

    val = *(tree.search("cash"));
    assert(val == "money");
    val = *(tree.search("bash"));
    assert(val == "sudo");

    //add fourth word: cashier
    tree.insert("bashes", "trash");
    val = *(tree.search("bashes"));
    assert(val == "trash");

    val = *(tree.search("cash"));
    assert(val == "money");
    val = *(tree.search("bash"));
    assert(val == "sudo");
    val = *(tree.search("cashier"));
    assert(val == "job");


    //add fifth word: cashes
    tree.insert("cashes", "moola");
    val = *(tree.search("cashes"));
    assert(val == "moola");

    val = *(tree.search("cash"));
    assert(val == "money");
    val = *(tree.search("bash"));
    assert(val == "sudo");
    val = *(tree.search("cashier"));
    assert(val == "job");
    val = *(tree.search("bashes"));
    assert(val == "trash");


    //add sixth word: case
    tree.insert("case", "closed");
    val = *(tree.search("case"));
    assert(val == "closed");

    //make sure first word is still in there
    val = *(tree.search("cash"));
    assert(val == "money");

    //add seventh word: call
    tree.insert("call", "me");
    val = *(tree.search("call"));
    assert(val == "me");

    //add eighth word: ca
    tree.insert("ca", "lifornia");
    val = *(tree.search("ca"));
    assert(val == "lifornia");

    //make sure previous words are still there
    val = *(tree.search("cash"));
    assert(val == "money");
    val = *(tree.search("bash"));
    assert(val == "sudo");
    val = *(tree.search("cashier"));
    assert(val == "job");
    val = *(tree.search("bashes"));
    assert(val == "trash");
    val = *(tree.search("cashes"));
    assert(val == "moola");
    val = *(tree.search("case"));
    assert(val == "closed");
    val = *(tree.search("call"));
    assert(val == "me");
    val = *(tree.search("ca"));
    assert(val == "lifornia");

    //add ninth word: ba
    tree.insert("ba", "kery");
    val = *(tree.search("ba"));
    assert(val == "kery");

    //make sure previous words are still there
    val = *(tree.search("cash"));
    assert(val == "money");
    val = *(tree.search("bash"));
    assert(val == "sudo");
    val = *(tree.search("cashier"));
    assert(val == "job");
    val = *(tree.search("bashes"));
    assert(val == "trash");
    val = *(tree.search("cashes"));
    assert(val == "moola");
    val = *(tree.search("case"));
    assert(val == "closed");
    val = *(tree.search("call"));
    assert(val == "me");
    val = *(tree.search("ca"));
    assert(val == "lifornia");
}

void testRT2() {
    RadixTree<std::string> tree;
    string val;

    tree.insert("cashier", "lifornia");
    val = *(tree.search("cashier"));
    assert(val == "lifornia");

    tree.insert("cash", "x");
    val = *(tree.search("cash"));
    assert(val == "x");
}

void testRT3() {
    RadixTree<std::string> tree;
    string val;

    tree.insert("Ahart@gmail.com", "1");
    val = *(tree.search("Ahart@gmail.com"));
    assert(val == "1");

    tree.insert("AmJuare@gmail.com", "2");
    val = *(tree.search("AmJuare@gmail.com"));
    assert(val == "2");
    val = *(tree.search("Ahart@gmail.com"));
    assert(val == "1");

    tree.insert("AmH74@gmail.com", "3");
    cout << *(tree.search("AmH74@gmail.com")) << endl;
    val = *(tree.search("AmH74@gmail.com"));
    assert(val == "3");
    val = *(tree.search("AmJuare@gmail.com"));
    assert(val == "2");
    val = *(tree.search("Ahart@gmail.com"));
    assert(val == "1");
    
    tree.insert("AmH57@gmail.com", "4");
    val = *(tree.search("AmH57@gmail.com"));
    assert(val == "4");
    val = *(tree.search("AmH74@gmail.com"));
    assert(val == "3");
    val = *(tree.search("AmJuare@gmail.com"));
    assert(val == "2");
    val = *(tree.search("Ahart@gmail.com"));
    assert(val == "1");
}

void testAttTranslator() { //tests attribute translator and person profile classes
    AttributeTranslator at;
    string filename = "/Users/mcapetz/Desktop/projects/CS32/Project_4_/Project_4_/translator.txt";
    cout << at.Load(filename) << endl;
    
    std::vector<AttValPair> pair_vect;
    AttValPair pair = AttValPair("job", "architect");
    pair_vect = at.FindCompatibleAttPairs(pair);
    
    cout << "***compatible attvalpairs for job, architect: " << pair_vect.size() << endl;
    
    for(int i = 0; i < pair_vect.size(); i++) {
        cout << pair_vect[i].attribute << "," << pair_vect[i].value << endl;
    }
    
    cout << endl;
    
    pair = AttValPair("trait", "bland");
    pair_vect = at.FindCompatibleAttPairs(pair);
    
    cout << "***compatible attvalpairs for trait,bland: " << pair_vect.size() << endl;
    
    for(int i = 0; i < pair_vect.size(); i++) {
        cout << pair_vect[i].attribute << "," << pair_vect[i].value << endl;
    }
    
    cout << endl;
    
    pair = AttValPair("trait", "anal retentive");
    pair_vect = at.FindCompatibleAttPairs(pair);
    
    cout << "***compatible attvalpairs for trait,anal retentive: " << pair_vect.size() << endl;
    
    for(int i = 0; i < pair_vect.size(); i++) {
        cout << pair_vect[i].attribute << "," << pair_vect[i].value << endl;
    }
    
    cout << endl;
    
}

void testMDB() { //tests member data base and person profile classes
    MemberDatabase mdb;
    string filename = "/Users/mcapetz/Desktop/projects/CS32/Project_4_/Project_4_/members.txt";
    cout << mdb.LoadDatabase(filename) << endl;
    
    const PersonProfile* currentPerson = mdb.GetMemberByEmail("AbFow2483@charter.net");
    assert(currentPerson->GetName() == "Abdullah Fowler"); //test first person
    
    currentPerson = mdb.GetMemberByEmail("ReValenzuela7003@charter.net");
    assert(currentPerson->GetName() == "Rex Valenzuela"); //test middle person
    
    currentPerson = mdb.GetMemberByEmail("ELand@live.com");
    assert(currentPerson->GetName() == "Elliott Landry"); //test last person
}




int main() {
    std::cout << "begin testing" << std::endl;
    testRadixTree();
    testRT2();
    testRT3();
    testAttTranslator();
    testMDB();

    std::cout << "all tests passed" << std::endl;
}